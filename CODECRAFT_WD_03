<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic-Tac-Toe</title>
    <style>
        /* Reset default styles */
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #FF99CC, #FFCCFF);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            color: #333;
        }
        /* Main container */
        
        .game-container {
            background-color: #fff;
            border-radius: 15px;
            box-shadow: 0 0 25px rgba(0, 0, 0, 0.1);
            text-align: center;
            padding: 30px;
            width: 450px;
            transition: transform 0.3s ease-in-out;
        }
        
        .game-container:hover {
            transform: scale(1.05);
        }
        /* Title */
        
        h1 {
            font-size: 36px;
            color: #ff4081;
            margin-bottom: 20px;
            text-transform: uppercase;
        }
        /* Game status */
        
        #game-status {
            font-size: 20px;
            margin-bottom: 20px;
            font-weight: bold;
            color: #555;
            transition: color 0.3s ease;
        }
        /* Grid */
        
        .grid {
            display: grid;
            grid-template-columns: repeat(3, 120px);
            grid-template-rows: repeat(3, 120px);
            gap: 15px;
            justify-content: center;
            margin-bottom: 20px;
        }
        /* Cells */
        
        .cell {
            display: flex;
            justify-content: center;
            align-items: center;
            background: linear-gradient(45deg, #fff, #f7f7f7);
            font-size: 50px;
            font-weight: bold;
            color: #333;
            border-radius: 15px;
            cursor: pointer;
            transition: background 0.3s ease, transform 0.2s ease, box-shadow 0.2s ease;
            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);
        }
        
        .cell:hover {
            background: linear-gradient(45deg, #ffecb3, #ffee58);
            transform: scale(1.1);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }
        /* Player X - Colorful */
        
        .cell.x {
            color: #ff4081;
            /* Vibrant pink */
            text-shadow: 1px 1px 5px rgba(0, 0, 0, 0.2);
        }
        /* Player O - Colorful */
        
        .cell.o {
            color: #00bcd4;
            /* Vibrant blue */
            text-shadow: 1px 1px 5px rgba(0, 0, 0, 0.2);
        }
        /* Winning cells */
        
        .winning-cell {
            background-color: #ffeb3b !important;
            animation: pulse 0.8s infinite;
        }
        /* Pulse animation for winning cells */
        
        @keyframes pulse {
            0% {
                transform: scale(1);
            }
            50% {
                transform: scale(1.1);
            }
            100% {
                transform: scale(1);
            }
        }
        /* Reset button */
        
        button {
            padding: 12px 30px;
            font-size: 18px;
            background-color: #ff4081;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease;
            margin-top: 20px;
        }
        
        button:hover {
            background-color: #f50057;
            transform: scale(1.1);
        }
    </style>
</head>

<body>
    <div class="game-container">
        <h1>Tic-Tac-Toe</h1>
        <div id="game-status">Player X's Turn</div>
        <div class="grid">
            <div class="cell" data-cell-index="0"></div>
            <div class="cell" data-cell-index="1"></div>
            <div class="cell" data-cell-index="2"></div>
            <div class="cell" data-cell-index="3"></div>
            <div class="cell" data-cell-index="4"></div>
            <div class="cell" data-cell-index="5"></div>
            <div class="cell" data-cell-index="6"></div>
            <div class="cell" data-cell-index="7"></div>
            <div class="cell" data-cell-index="8"></div>
        </div>
        <button id="reset-button">Reset Game</button>
    </div>

    <script>
        const cells = document.querySelectorAll('.cell');
        const statusDisplay = document.getElementById('game-status');
        const resetButton = document.getElementById('reset-button');

        let currentPlayer = 'X';
        let gameActive = true;
        let boardState = ['', '', '', '', '', '', '', '', ''];

        const winningCombinations = [
            [0, 1, 2],
            [3, 4, 5],
            [6, 7, 8],
            [0, 3, 6],
            [1, 4, 7],
            [2, 5, 8],
            [0, 4, 8],
            [2, 4, 6]
        ];

        // Event listener for cell clicks
        cells.forEach(cell => {
            cell.addEventListener('click', () => handleCellClick(cell));
        });

        // Function to handle cell click
        function handleCellClick(cell) {
            const cellIndex = cell.getAttribute('data-cell-index');
            if (boardState[cellIndex] !== '' || !gameActive) return;

            // Update board state and cell content
            boardState[cellIndex] = currentPlayer;
            cell.textContent = currentPlayer;

            // Add X or O class for styling
            cell.classList.add(currentPlayer.toLowerCase());

            // Check if there's a winner
            if (checkWinner()) {
                statusDisplay.textContent = `${currentPlayer} wins!`;
                highlightWinningCells();
                gameActive = false;
            } else if (boardState.every(cell => cell !== '')) {
                statusDisplay.textContent = 'It\'s a draw!';
                gameActive = false;
            } else {
                // Switch turns
                currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
                statusDisplay.textContent = `${currentPlayer}'s Turn`;
            }
        }

        // Function to check for a winner
        function checkWinner() {
            return winningCombinations.some(combination => {
                const [a, b, c] = combination;
                return boardState[a] && boardState[a] === boardState[b] && boardState[a] === boardState[c];
            });
        }

        // Highlight winning cells
        function highlightWinningCells() {
            winningCombinations.forEach(combination => {
                const [a, b, c] = combination;
                if (boardState[a] && boardState[a] === boardState[b] && boardState[a] === boardState[c]) {
                    cells[a].classList.add('winning-cell');
                    cells[b].classList.add('winning-cell');
                    cells[c].classList.add('winning-cell');
                }
            });
        }

        // Reset game when the button is clicked
        resetButton.addEventListener('click', resetGame);

        // Function to reset the game
        function resetGame() {
            boardState = ['', '', '', '', '', '', '', '', ''];
            cells.forEach(cell => {
                cell.textContent = '';
                cell.classList.remove('x', 'o', 'winning-cell');
            });
            gameActive = true;
            currentPlayer = 'X';
            statusDisplay.textContent = `${currentPlayer}'s Turn`;
        }
    </script>
</body>

</html>
