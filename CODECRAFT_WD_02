<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stopwatch Web Application</title>
    <style>
        /* Background Color and General Layout */
        
        body {
            font-family: 'Arial', sans-serif;
            background: #222;
            /* Dark background for the page */
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
        /* Stopwatch Container Styling */
        
        .stopwatch-container {
            background: #2c3e50;
            /* Dark blue-gray background for the container */
            border-radius: 15px;
            box-shadow: 0 4px 30px rgba(0, 0, 0, 0.4);
            /* Slightly stronger shadow */
            padding: 40px 30px;
            text-align: center;
            width: 300px;
        }
        
        .stopwatch-container h1 {
            font-size: 50px;
            color: #e74c3c;
            /* Vibrant red for the stopwatch display */
            margin: 0;
            letter-spacing: 3px;
        }
        /* Controls Section */
        
        .controls {
            margin-top: 20px;
        }
        /* Button Styles */
        
        button {
            background-color: #3498db;
            /* Blue button color */
            color: white;
            padding: 12px 24px;
            font-size: 16px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            margin: 10px;
            transition: background-color 0.3s, transform 0.2s;
        }
        
        button:hover {
            background-color: #2980b9;
            /* Darker blue on hover */
            transform: translateY(-2px);
        }
        
        button:active {
            transform: translateY(2px);
            /* Slight depression effect on click */
        }
        
        button:disabled {
            background-color: #95a5a6;
            /* Disabled button color */
        }
        /* Lap Times List Section */
        
        .laps {
            margin-top: 20px;
        }
        
        .laps ul {
            list-style-type: none;
            padding: 0;
        }
        /* Individual Lap List Items */
        
        .laps li {
            background-color: #34495e;
            /* Darker gray-blue for laps */
            color: #ecf0f1;
            /* Light text color for contrast */
            padding: 8px;
            margin: 5px 0;
            border-radius: 5px;
        }
        
        .laps li:nth-child(odd) {
            background-color: #2c3e50;
            /* Slightly darker shade for odd laps */
        }
        
        .laps li:nth-child(even) {
            background-color: #34495e;
            /* Slightly lighter shade for even laps */
        }
    </style>
</head>

<body>
    <div class="stopwatch-container">
        <h1 id="display">00:00:00</h1>
        <div class="controls">
            <button id="start">Start</button>
            <button id="pause" disabled>Pause</button>
            <button id="reset" disabled>Reset</button>
            <button id="lap" disabled>Lap</button>
        </div>
        <div class="laps">
            <h2 style="color: #ecf0f1;">Laps</h2>
            <ul id="lapList"></ul>
        </div>
    </div>

    <script>
        // Initialize variables for stopwatch
        let startTime, updatedTime, difference, tInterval;
        let running = false;
        let lapCount = 0;

        // Grab HTML elements
        const display = document.getElementById("display");
        const lapList = document.getElementById("lapList");
        const startButton = document.getElementById("start");
        const pauseButton = document.getElementById("pause");
        const resetButton = document.getElementById("reset");
        const lapButton = document.getElementById("lap");

        // Event listeners for buttons
        startButton.onclick = startTimer;
        pauseButton.onclick = pauseTimer;
        resetButton.onclick = resetTimer;
        lapButton.onclick = recordLap;

        // Start the timer
        function startTimer() {
            if (!running) {
                startTime = new Date().getTime() - (difference || 0);
                tInterval = setInterval(updateTime, 10);
                running = true;

                // Update button states
                startButton.disabled = true;
                pauseButton.disabled = false;
                resetButton.disabled = false;
                lapButton.disabled = false;
            }
        }

        // Pause the timer
        function pauseTimer() {
            if (running) {
                clearInterval(tInterval);
                running = false;

                // Update button states
                startButton.disabled = false;
                pauseButton.disabled = true;
            }
        }

        // Reset the timer
        function resetTimer() {
            clearInterval(tInterval);
            running = false;
            difference = 0;
            lapCount = 0;
            display.innerHTML = "00:00:00";
            lapList.innerHTML = "";

            // Update button states
            startButton.disabled = false;
            pauseButton.disabled = true;
            resetButton.disabled = true;
            lapButton.disabled = true;
        }

        // Record a lap
        function recordLap() {
            if (running) {
                lapCount++;
                const lapTime = formatTime(difference);
                const lapItem = document.createElement("li");
                lapItem.textContent = `Lap ${lapCount}: ${lapTime}`;
                lapList.appendChild(lapItem);
                lapList.scrollTop = lapList.scrollHeight; // Scroll to the bottom of the lap list
            }
        }

        // Update the stopwatch time
        function updateTime() {
            updatedTime = new Date().getTime();
            difference = updatedTime - startTime;
            display.innerHTML = formatTime(difference);
        }

        // Format time in HH:MM:SS format
        function formatTime(ms) {
            const hours = Math.floor((ms / (1000 * 60 * 60)) % 24);
            const minutes = Math.floor((ms / (1000 * 60)) % 60);
            const seconds = Math.floor((ms / 1000) % 60);
            return `${pad(hours)}:${pad(minutes)}:${pad(seconds)}`;
        }

        // Pad single-digit numbers with leading zero
        function pad(value) {
            return value < 10 ? '0' + value : value;
        }
    </script>
</body>

</html>
